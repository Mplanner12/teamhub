{
  "openapi": "3.0.0",
  "info": {
    "title": "TeamHub API",
    "version": "1.0.0",
    "description": "TeamHub backend API docs powered by Plannorium"
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local server"
    },
    {
      "url": "https://teamhub-six.vercel.app",
      "description": "Vercel production"
    },
    {
      "url": "https://teamhub-87t6.onrender.com",
      "description": "Render production"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully. Verification email sent."
          },
          "400": {
            "description": "Invalid input or user already exists"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Log in a user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, returns user and token"
          },
          "400": {
            "description": "Invalid credentials or user not verified"
          }
        }
      }
    },
    "/auth/verify/{token}": {
      "get": {
        "summary": "Verify user's email address using a token from the email link",
        "tags": ["Authentication"],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The email verification token"
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
    "/auth/change-role": {
      "post": {
        "summary": "Change a user's role (Admin/SuperAdmin only) - Duplicates user.routes.ts endpoint",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId", "newRole"],
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "newRole": {
                    "type": "string",
                    "enum": ["user", "admin", "superAdmin"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role changed successfully"
          },
          "400": {
            "description": "Invalid input or invalid role"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Send a password reset link",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent if user exists"
          },
          "400": {
            "description": "Invalid email format"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset user's password using a token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token", "newPassword"],
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "400": {
            "description": "Invalid token or password format"
          }
        }
      }
    },
    "/auth/invite-user": {
      "post": {
        "summary": "Invite a new user (SuperAdmin only)",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "role"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["admin", "member"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation sent successfully"
          },
          "400": {
            "description": "Invalid input, user already exists, or invalid role"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (not a superAdmin)"
          }
        }
      }
    },
    "/auth/accept-invitation": {
      "post": {
        "summary": "Accept a user invitation and set up the account",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token", "password", "name"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The invitation token received via email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The password for the new account"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the new user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation accepted successfully, user account created/activated. Returns user details and authentication token."
          },
          "400": {
            "description": "Invalid token, token expired, or invalid input (e.g., password format, name missing)"
          },
          "404": {
            "description": "Invitation token not found"
          }
        }
      }
    },
    "/calendar/": {
      "post": {
        "summary": "Create a new calendar event",
        "tags": ["Calendar"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "startTime", "endTime"],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "attendees": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEvent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all calendar events for the authenticated user's company",
        "tags": ["Calendar"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of calendar events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/calls/initiate": {
      "post": {
        "summary": "Initiate a voice or video call",
        "tags": ["Calls"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["toUserId", "type"],
                "properties": {
                  "toUserId": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["video", "voice"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Call initiated successfully"
          },
          "400": {
            "description": "Invalid request body"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/chats/{receiverId}": {
      "get": {
        "summary": "Get chat history with a specific user",
        "tags": ["Chat"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "receiverId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to fetch chat history with"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of chat messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/companies/": {
      "post": {
        "summary": "Create a new company",
        "tags": ["Companies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Company details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "contactEmail"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "contactEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Unique contact email for the company."
                  },
                  "phone": {
                    "type": "string",
                    "description": "Optional phone number."
                  },
                  "address": {
                    "type": "string",
                    "description": "Optional company address."
                  },
                  "website": {
                    "type": "string",
                    "format": "url",
                    "description": "Optional company website."
                  },
                  "industry": {
                    "type": "string",
                    "description": "Optional industry type."
                  },
                  "logoUrl": {
                    "type": "string",
                    "format": "url",
                    "description": "Optional URL for the company logo."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "summary": "Get all companies",
        "tags": ["Companies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of companies"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/companies/{companyId}": {
      "put": {
        "summary": "Update a company",
        "tags": ["Companies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the company to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Company not found"
          }
        }
      }
    },
    "/api/documents/upload": {
      "post": {
        "summary": "Upload a new document",
        "tags": ["Documents"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The document file to upload."
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description for the document."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "description": "No file provided or invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Upload failed"
          }
        }
      }
    },
    "/api/documents/": {
      "get": {
        "summary": "Get all documents for the authenticated user's company",
        "tags": ["Documents"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/notifications/my": {
      "get": {
        "summary": "Retrieve notifications for the authenticated user",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notifications for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/notifications/{id}/read": {
      "patch": {
        "summary": "Mark a specific notification as read",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the notification to mark as read"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "Invalid notification ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Notification not found or user not authorized"
          }
        }
      }
    },
    "/api/notifications/mark-all-as-read": {
      "patch": {
        "summary": "Mark all unread notifications for the user as read",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications marked as read"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/notifications/unread-count": {
      "get": {
        "summary": "Get the count of unread notifications for the authenticated user",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Count of unread notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/sub-companies/": {
      "post": {
        "summary": "Create a new sub-company",
        "tags": ["SubCompanies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "parentCompanyId"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "parentCompanyId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sub-company created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/sub-companies/{parentCompanyId}": {
      "get": {
        "summary": "Get sub-companies for a parent company",
        "tags": ["SubCompanies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "parentCompanyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the parent company"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sub-companies"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/sub-companies/{subCompanyId}/assign": {
      "put": {
        "summary": "Assign users to a sub-company",
        "tags": ["SubCompanies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subCompanyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the sub-company"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userIds"],
                "properties": {
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users assigned successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/tasks/": {
      "post": {
        "summary": "Create a new task",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "assignedTo": {
                    "type": "string",
                    "description": "User ID of the assignee"
                  },
                  "teamId": {
                    "type": "string"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["low", "medium", "high"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/tasks/{teamId}": {
      "get": {
        "summary": "Get tasks for a specific team",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the team"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks for the team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Team not found"
          }
        }
      }
    },
    "/api/tasks/{taskId}/status": {
      "patch": {
        "summary": "Update the status of a task",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the task"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["status"],
                "properties": {
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/tasks/{taskId}/comment": {
      "post": {
        "summary": "Add a comment to a task",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the task"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["text"],
                "properties": {
                  "text": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/tasks/{taskId}/attachment": {
      "post": {
        "summary": "Upload an attachment to a task",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the task"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully"
          },
          "400": {
            "description": "No file attached or invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/teams/create": {
      "post": {
        "summary": "Create a new team (Admin/SuperAdmin only)",
        "tags": ["Teams"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "companyId", "lead"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "companyId": {
                    "type": "string"
                  },
                  "lead": {
                    "type": "string",
                    "description": "User ID for the team lead"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/teams/company/{companyId}": {
      "get": {
        "summary": "Get all teams for a specific company",
        "tags": ["Teams"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the company"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of teams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Company not found"
          }
        }
      }
    },
    "/teams/add-member": {
      "put": {
        "summary": "Add a member to a team (Admin only)",
        "tags": ["Teams"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["teamId", "userId"],
                "properties": {
                  "teamId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Team or User not found"
          }
        }
      }
    },
    "/teams/remove-member": {
      "put": {
        "summary": "Remove a member from a team (Admin only)",
        "tags": ["Teams"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["teamId", "userId"],
                "properties": {
                  "teamId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Team or User not found"
          }
        }
      }
    },
    "/teams/update-lead": {
      "put": {
        "summary": "Update the lead of a team (Admin only)",
        "tags": ["Teams"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["teamId", "leadId"],
                "properties": {
                  "teamId": {
                    "type": "string"
                  },
                  "leadId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team lead updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Team or User not found"
          }
        }
      }
    },
    "/api/users/": {
      "get": {
        "summary": "Get a list of users (requires authentication)",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/profile": {
      "put": {
        "summary": "Update authenticated user's profile",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CalendarEvent": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "attendees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdBy": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "sender": {
            "type": "string",
            "description": "ID of the sender (User)"
          },
          "receiver": {
            "type": "string",
            "description": "ID of the receiver (User)"
          },
          "groupId": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "companyId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Company": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "uploadedBy": {
            "type": "string",
            "description": "User ID of the uploader"
          },
          "fileName": {
            "type": "string"
          },
          "fileUrl": {
            "type": "string"
          },
          "fileType": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The notification ID."
          },
          "to": {
            "type": "string",
            "description": "The ID of the user who will receive the notification."
          },
          "from": {
            "type": "string",
            "description": "The ID of the user who sent the notification (optional)."
          },
          "type": {
            "type": "string",
            "enum": ["task", "calendar", "chat", "document", "team"],
            "description": "The type of notification."
          },
          "message": {
            "type": "string",
            "description": "The content of the notification."
          },
          "data": {
            "type": "object",
            "description": "Additional data related to the notification (e.g., taskId, link)."
          },
          "read": {
            "type": "boolean",
            "description": "Indicates if the notification has been read.",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the notification was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the notification was last updated."
          }
        }
      },
      "SubCompany": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentCompanyId": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "assignedTo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of User IDs assigned to the task"
          },
          "createdBy": {
            "type": "string",
            "description": "User ID of the task creator"
          },
          "teamId": {
            "type": "string",
            "description": "ID of the team this task belongs to"
          },
          "status": {
            "type": "string",
            "enum": ["To Do", "In Progress", "Done"]
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "priority": {
            "type": "string",
            "enum": ["Low", "Medium", "High"]
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "URLs of attachments"
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "companyId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Team": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "lead": {
            "type": "string",
            "description": "User ID of the team lead"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin", "superAdmin"]
          },
          "companyId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LoginCredentials": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "UserRegistration": {
        "type": "object",
        "required": ["fullName", "email", "password", "companyId"],
        "properties": {
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "companyId": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Calendar",
      "description": "Calendar event management"
    },
    {
      "name": "Calls",
      "description": "Call management"
    },
    {
      "name": "Chat",
      "description": "Chat and messaging"
    },
    {
      "name": "Companies",
      "description": "Company management (SuperAdmin only)"
    },
    {
      "name": "Documents",
      "description": "Document management"
    },
    {
      "name": "Notifications",
      "description": "User notification management"
    },
    {
      "name": "SubCompanies",
      "description": "Sub-company management (Admin/SuperAdmin only)"
    },
    {
      "name": "Tasks",
      "description": "Task management"
    },
    {
      "name": "Teams",
      "description": "Team management"
    },
    {
      "name": "Users",
      "description": "User profile management and listing (distinct from auth)"
    }
  ]
}
